// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Especie {
  id      Int      @id @default(autoincrement())
  nome    String   @db.VarChar(60)
  animais Animal[]

  @@map("especies")
}

model Animal {
  id            Int          @id @default(autoincrement())
  nome          String       @db.VarChar(60)
  isAtivo       Int          @default(99)
  peso          Decimal      @db.Decimal(4, 1)
  porte         Portes       @default(M)
  nascimentoApx DateTime
  castracao     Castrado     @default(Verificar)
  castracaoApx  DateTime?
  status        Status
  fotos         FotoAnimal[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  especie       Especie      @relation(fields: [especieId], references: [id])
  especieId     Int
  sexo          Sexos        @default(Nao_Identificado)
  observacoes   String?
  admin         Admin        @relation(fields: [adminId], references: [id])
  adminId       Int          @default(1)
  // Pedido          Pedido[]
  // FotoInteressado FotoInteressado[]

  @@map("animais")
}

enum Castrado {
  Verificar
  Nao
  Pelo_Abrigo
  Ja_Veio_Castrado
}

enum Sexos {
  Macho
  Femea
  Verificar
  Nao_Identificado
}

enum Status {
  Disponive_Para_Adocao
  Adotado
  Lar_Temporario
}

model FotoAnimal {
  id         Int     @id @default(autoincrement())
  descricao  String  @db.VarChar(30)
  codigoFoto String  @db.Text
  animal     Animal? @relation(fields: [animalId], references: [id])
  animalId   Int

  @@map("fotos")
}

model FotoFuncionario {
  id            Int          @id @default(autoincrement())
  descricao     String       @db.VarChar(30)
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  funcionarioId String?      @db.VarChar(36)

  @@map("fotofuncionarios")
}

model Funcionario {
  id    String            @id @default(uuid()) @db.VarChar(36)
  fotos FotoFuncionario[]
}

model FotoInteressado {
  id            Int          @id @default(autoincrement())
  descricao     String       @db.VarChar(30)
  codigoFoto    String       @db.Text
  // animal        Animal?      @relation(fields: [animalId], references: [id])
  // animalId      Int
  // adotante      Adotante?    @relation(fields: [adotanteId], references: [id])
  // adotanteId    Int
  // funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  // funcionarioId Int
  Interessado   Interessado? @relation(fields: [interessadoId], references: [id])
  interessadoId String?      @db.VarChar(36)

  @@map("fotointeressados")
}

//Token usado no id para manter logado nas requisicoes, garante mais seguranca quando for armazenado
//no local storage, pode ser usado fora do id, geralmente Ã© e pode mudar ou experar no tempo estipulado
//podendo assim ter um campo id sequencial e usando o token em outro item abaixo.
model Interessado {
  id             String            @id @default(uuid()) @db.VarChar(36)
  nome           String            @db.VarChar(60)
  cpf            String            @unique @db.VarChar(11)
  fone           String            @db.VarChar(60)
  isAtivo        Boolean           @default(true)
  estadoCivil    String            @db.VarChar(40)
  dataNascimento DateTime
  senha          String            @db.VarChar(60) // senha deve ser varchar(60)
  recoveryCode   String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  // pedidos        Pedido[]
  fotos          FotoInteressado[]

  @@map("adotantes")
}

model Endereco {
  id          Int     @id @default(autoincrement())
  cep         String? @db.VarChar(60)
  cidade      String  @db.VarChar(60)
  bairro      String? @db.VarChar(60)
  estado      String  @db.VarChar(60)
  endereco    String  @db.VarChar(60)
  numero      String  @db.VarChar(60)
  complemento String  @db.VarChar(60)
  referencia  String? @db.VarChar(60)
}

// model Pedido {
//   id         Int         @id @default(autoincrement())
//   adotante   Interessado @relation(fields: [adotanteId], references: [id])
//   adotanteId String      @db.VarChar(36)
//   animal     Animal      @relation(fields: [animalId], references: [id])
//   animalId   Int
//   descricao  String      @db.VarChar(300)
//   resposta   String?     @db.VarChar(300)
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt

//   @@map("pedidos")
// }

model Admin {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(60)
  email     String   @unique @db.VarChar(60)
  senha     String   @db.VarChar(60) // senha deve ser varchar(60)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animais   Animal[]

  @@map("admins")
}

enum Portes {
  PP
  P
  M
  G
  GG
}
